 Assert deleted.
 they were deleted.
START_KEY
getStore
ttlInSeconds
HConstants
createSmallerStoreFile
getBytes
Bytes
scanner
STARTROW
deleteFamily
 assertEquals(cellValues.length, 3);
secondRowBytes
createStoreFile
START_KEY_BYTES
containsStartRow
count
COMPACTION_THRESHOLD
getFileSystem
getRow
 deleted row.
 Cell.createSingleCellArray(r.get(STARTROW, COLUMN_FAMILY_TEXT, -1, 100 /*Too many*/));
size
addFamily
 Do a simple TTL test.
getStorefiles
 Assert that the second row is still deleted.
next
 check Compaction Dir for this Regions is cleaned up
 Add a bit of data and flush.  Start adding at 'bbb'.
assertFalse
values
 Assert that I can get 3 versions since it is the max I should get
delete
System
result
sleep
setMaxVersions
assertTrue
 Always 3 versions if that is what max versions is.
get
 FIX
COLUMN_FAMILY_TEXT
row
COLUMN_FAMILY
getReader
famAndQf
f
 Increment the least significant character so we get to next row.
isEmpty
assertEquals
store
addContent
 check compaction dir is exists
 Force major compaction.
flushcache
seekTo
Thread
r
 Assert == 3 when we ask for versions.
compactStores
currentTimeMillis
equals
exists
getKeyValue
toString
testCompaction
 file.
getScanner
