getName
be the same
encryptionKey
KeyProviderCryptoExtension
assertArrayEquals
ekv
decryptEncryptedKey
assertNotNull
getEncryptedKeyIv
 Generate 1 new EEK @v2 add to the list.
add
generateEncryptedKey
getEncryptionKeyName
ekvsOrig
 Roll the EK again
Re-encrypted EEK should have same material
kv1
getVersionName
Expected encrypted key material
 Generate 1 new EEK @v1 add to the list.
ENCRYPTION_KEY_NAME
 Verify each ekv
getMaterial
testReencryptEncryptedKeys
size
 Roll the EK
getEncryptionKeyVersionName
Arrays
 Reencrypt ekvs
getEncryptedKeyVersion
assertFalse
reencryptEncryptedKeys
ekvs
rollNewVersion
assertTrue
get
Version name should be EEK
 Decrypt the new EEK into an EK and check it
 leave a deep copy of the original, for verification purpose.
assertEquals
same kv.
kpExt
kv
 Decrypt it again and it should be the same
origKv
 Generate 2 new EEKs @v0 and add to the list
Encrypted key material should not equal encryption key material
Re-encrypted EEK should have different material
 Verify decrypting the new EEK and orig EEK gives the same material.
orig
equals
Returned EEK and original EEK should both decrypt to the 
Encryption key name should be 
Length of encryption key material and EEK material should 
